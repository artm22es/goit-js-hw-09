{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAMH,EAAKE,cAAc,UACCE,EAAAJ,EAAKK,SAA7BC,EAAwBF,EAAxBG,MAAOC,EAAiBJ,EAAjBK,KAAMC,EAAWN,EAAXO,OAIrB,SAASC,EAAUC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYN,MAC7BT,EAAAkB,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,CAG/D,SAASI,EAAUN,G,IAAEC,EAAFD,EAAEC,SAAUM,EAAZP,EAAYN,MAC7BT,EAAAkB,OAAOK,QAAQ,sBAAqCH,OAAfJ,EAAS,QAAYI,OAANE,EAAM,M,CAP5DpB,EAAKsB,iBAAiB,UAUtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAIC,EAAaC,OAAOpB,EAAMqB,OACxBC,EAAYF,OAAOlB,EAAKmB,OACxBE,EAAcH,OAAOhB,EAAOiB,OAClCxB,EAAI2B,UAAW,EACfC,YAAW,WACT5B,EAAI2B,UAAW,C,IACbD,EAAc,GAAKD,EAAYH,GAEnCO,MAAMN,OAAOG,IACVI,KAAK,MACLC,SAAQ,SAACC,EAAGC,GAQjB,IAAuBtB,EAAUuB,GAAVvB,EAPHsB,EAAM,EAOOC,EAPJZ,EAQpB,IAAIa,SAAQ,SAACC,EAAKC,GACvB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCZ,YAAW,WACLU,EACFF,EAAI,CAAEzB,WAAUP,MAAA8B,IAEhBG,EAAI,CAAE1B,WAAUP,MAAA8B,G,GAEjBA,E,KAfEO,KAAKhC,GACLiC,MAAM1B,GACTM,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst btn = form.querySelector('button');\nconst { delay, step, amount } = form.elements;\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleRes({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction handleRej({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction handleSubmit(evt) {\n  evt.preventDefault();\n  let delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  btn.disabled = true;\n  setTimeout(() => {\n    btn.disabled = false;\n  }, (amountValue - 1) * stepValue + delayValue);\n\n  Array(Number(amountValue))\n    .fill(null)\n    .forEach((_, idx) => {\n      createPromise(idx + 1, delayValue)\n        .then(handleRes)\n        .catch(handleRej);\n      delayValue += stepValue;\n    });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        res({ position, delay });\n      } else {\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$btn","$ce04d3a99e08e73b$var$_elements","elements","$ce04d3a99e08e73b$var$delay","delay","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","$ce04d3a99e08e73b$var$handleRes","param","position","delay1","Notify","success","concat","$ce04d3a99e08e73b$var$handleRej","delay2","failure","addEventListener","evt","preventDefault","delayValue","Number","value","stepValue","amountValue","disabled","setTimeout","Array","fill","forEach","_","idx","delay3","Promise","res","rej","shouldResolve","Math","random","then","catch"],"version":3,"file":"03-promises.8826b7e1.js.map"}